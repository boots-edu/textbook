name: Build Textbook

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NPM
        uses: actions/setup-node@v3
      - name: Setup Library
        run: |
          cd library
          npm install
          npm run build
          cd ../
      - name: Copy Library
        run: |
          cp library/dist/index.js source/assets/js/boots-library.js
      - name: Build PDF version
        run: |
          cd pdf
          npm install
          npm run build
          cd ../
      - name: Copy PDF
        run: |
          cp pdf/dist/boots_textbook.pdf source/assets/boots_textbook.pdf
      - name: Install Python and dependencies
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Build slides
        run: |
          cd slides/
          mkdir -p dist
          pip install -r requirements.txt

          # Initalize the output markdown file
          output_file="../source/slides.md"
          echo "# Slides" > "$output_file"

          # Construct the base URL dynamically
          org_name="${GITHUB_REPOSITORY%/*}"
          repo_name="${GITHUB_REPOSITORY##*/}"
          base_url="https://$org_name.github.io/$repo_name/assets/slides"

          # Iterate over all of the markdown files in ../source/text/ directories
          # for file in ../source/text/**/*.md; do
          find ../source/text/ -type f -name "*.md" | sort -V | while read -r file; do
            # Extract the base name of the file (e.g., "conditionals.md")
            base_name=$(basename "$file")
            # Extract the directory name of the file (e.g., "1-typescript")
            dir_name=$(dirname "$file" | xargs -I {} basename {})
            # Construct the output filename (e.g., "1-typescript-conditionals.pptx")
            output_name="${dir_name}-${base_name%.md}.pptx"
            # Convert the markdown file to a powerpoint file
            python build_slides.py "$file" --output "./dist/$output_name" --quiet || {
              echo "Failed to convert $file" >&2
              continue
            }
            # Construct the url
            url="$base_url/$output_name"
            # Append the filename and URL to the markdown file
            echo "* [$output_name]($url)" >> "$output_file"
          done
          cd ../
      - name: Copy slides
        run: |
          mkdir -p source/assets/slides
          cp slides/dist/*.pptx source/assets/slides
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./source/
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
